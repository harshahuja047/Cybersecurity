import tkinter as tk
from tkinter import messagebox
import random
import string

class PasswordApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Password Analyzer and Generator")
        
        # Password Entry
        self.password_label = tk.Label(root, text="Enter Password:")
        self.password_label.pack()
        self.password_entry = tk.Entry(root, show='*', width=40)
        self.password_entry.pack()
        
        # Analyze Button
        self.analyze_button = tk.Button(root, text="Analyze Password", command=self.analyze_password)
        self.analyze_button.pack()
        
        # Analysis Result
        self.analysis_result = tk.Label(root, text="", wraplength=300)
        self.analysis_result.pack()
        
        # Password Generation
        self.length_label = tk.Label(root, text="Enter Length for Generated Password:")
        self.length_label.pack()
        self.length_entry = tk.Entry(root, width=5)
        self.length_entry.pack()
        
        self.generate_button = tk.Button(root, text="Generate Password", command=self.generate_password)
        self.generate_button.pack()
        
        # Generated Password Display
        self.generated_password_label = tk.Label(root, text="")
        self.generated_password_label.pack()

    def analyze_password(self):
        password = self.password_entry.get()
        if len(password) < 8:
            self.analysis_result.config(text="Password must be at least 8 characters long.", fg="red")
            return
        if not any(char.isdigit() for char in password):
            self.analysis_result.config(text="Password must include at least one digit.", fg="red")
            return
        if not any(char.isupper() for char in password):
            self.analysis_result.config(text="Password must include at least one uppercase letter.", fg="red")
            return
        if not any(char.islower() for char in password):
            self.analysis_result.config(text="Password must include at least one lowercase letter.", fg="red")
            return
        if not any(char in string.punctuation for char in password):
            self.analysis_result.config(text="Password must include at least one special character.", fg="red")
            return
        self.analysis_result.config(text="Password is strong.", fg="green")

    def generate_password(self):
        try:
            length = int(self.length_entry.get())
            if length < 8:
                messagebox.showerror("Error", "Password length must be at least 8 characters.")
                return
        except ValueError:
            messagebox.showerror("Error", "Please enter a valid number.")
            return

        characters = string.ascii_letters + string.digits + string.punctuation
        password = ''.join(random.choice(characters) for i in range(length))
        self.generated_password_label.config(text=f"Generated Password: {password}", fg="blue")

if __name__ == "__main__":
    root = tk.Tk()
    app = PasswordApp(root)
    root.mainloop()
